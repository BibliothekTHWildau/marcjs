#!/usr/bin/env node

let nopt   = require('nopt'),
    fs     = require('fs'),
    async  = require('async'),
    marcjs = require('../lib/marcjs');

let parsed = nopt(
  {
    "parser": ["iso2709","marcxml","mij"],
    "formater": ["text","iso2709","marcxml","json","mij"],
    "output": String,
    "help": Boolean
  },
  {
    "p": "--parser",
    "f": "--formater",
    "o": "--output"
  },
  process.argv, 2
);

function usage() {
  console.log(
    "Usage: marcjs -p iso2709|marcxml|mij -f text|iso2709|marcjs|mij -o result file1 file2"
  );
  process.exit(1);
}
if (parsed.help) { usage(); }

parsed.parser = parsed.parser || 'iso2709';
parsed.formater = parsed.formater || 'text';

let output = parsed.output ? fs.createWriteStream(parsed.output)
                           : process.stdout;
let writer = marcjs.getWriter(output, parsed.formater);
let tasks = [];
let addTask = function(input) {
  tasks.push(function(callback) {
    let reader = marcjs.getReadable(input, parsed.parser);
    reader.on('data', function(record) { writer._write(record, null, callback); });
    reader.on('end', function() { callback(null); });
  });
};
if (parsed.argv.remain.length > 0) {
  parsed.argv.remain.forEach(function(file) {
    addTask(fs.createReadStream(file));
  });
} else {
  addTask(process.stdin);
}
async.series(tasks, function() { writer.end(); });
